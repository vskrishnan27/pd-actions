name: my

on:
#    schedule:
#      - cron: '0 0 * * *'
    push:
    workflow_dispatch:

jobs:
  Run-Analysis:
    runs-on: ubuntu-latest
    environment: vskrishnan
    timeout-minutes: 5760 #4 days 
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      
      - name: Set execute permission for the script
        run: |
          chmod +x $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh
          chmod +x $GITHUB_WORKSPACE/scripts/domainRotator.sh

      - name: Run DomainRotator
        run : bash $GITHUB_WORKSPACE/scripts/domainRotator.sh  

      # - name: Notify Start Status
      #   run: |
      #     bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh start

      - name: Send Domain List
        run: |
          bash $GITHUB_WORKSPACE/scripts/notify/sendDomainList.sh   
      
      - name: Create local changes
        run: |
            git pull
            git add input/
  
      - name: Commit results to Github
        run: |
            git config --local user.email "vskrishnan27@gmail.com"
            git config --global user.name "vskrishnan27"
            git commit -m "Domain Update" --allow-empty
        
      - name: Read and Store
        id: read-and-store
        run: |
          first_line=$(head -n 1 $GITHUB_WORKSPACE/input/domains.txt)    
          # Set the output variable
          echo "::set-output name=DOMAIN_NAME::$first_line"         
          
      - name: Print pat
        run: |
            echo ${{ secrets.P_A_T }}
        shell: bash 

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
              github_token: ${{ secrets.P_A_T }}
              branch: ${{ github.ref }}
      
      - name: Prepare domain and check directory
        id: prepare
        run: |
          domain_name="${{ steps.read-and-store.outputs.DOMAIN_NAME }}"
          folder_name="${domain_name//./_}"
          echo "Folder name: $folder_name"
          
          # Check if the directory exists, if not, create it
          if [ ! -d "output/$folder_name" ]; then
            echo "Creating directory: output/$folder_name"
            mkdir -p "output/$folder_name"
          else
            echo "Directory already exists: output/$folder_name"
          fi
          # Expose the folder name for later steps
          echo "folder_path=output/$folder_name" >> $GITHUB_ENV
          echo "domain_name=$folder_name" >> $GITHUB_ENV
        shell: bash          
      
      # - name: Notify Input Commit Status
      #   run: |
      #       bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh "Commited Successfully ... ${{ steps.read-and-store.outputs.DOMAIN_NAME }}"
      
      - name: Setup golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.21.1

      - name: Setup Dependencies
        run: sudo apt-get install libpcap-dev # Required for Naabu

      - name: Cache Go
        id: cache-go
        uses: actions/cache@v2
        with:
          path: /home/runner/go
          key: ${{ runner.os }}-go

      - name: Setting up ProjectDiscovery tools
        if: steps.cache-go.outputs.cache-hit != 'true'
        env:
          GO111MODULE: on
        run: |
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/projectdiscovery/dnsx/cmd/dnsx@latest
          go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          go install github.com/projectdiscovery/notify/cmd/notify@latest
        shell: bash
      
      - name: Current Directory path
        run: |
          pwd
        shell: bash

      # - name: Running SubFinder for passive DNS enumeration
      #   run: |
      #     subfinder -dL input/domains.txt -config config/subfinder-config.yaml -o ${{ env.folder_path }}/passive_subdomains.txt
      #   shell: bash

      # - name: Notify Passive Domains Count  
      #   run: |
      #     bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh "Passive Subdomains :: ${{ steps.read-and-store.outputs.DOMAIN_NAME }} : $(cat $GITHUB_WORKSPACE/${{ env.folder_path }}/passive_subdomains.txt | wc -l)"

      # - name: Running dnsx for valid DNS filtering 
      #   run: |
      #     dnsx -l ${{ env.folder_path }}/passive_subdomains.txt -t 50 | tee ${{ env.folder_path }}/active_subdomains.txt
      #   shell: bash
        
      # - name: Notify Active Sub Domains Count  
      #   run: |
      #     bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh "Active Subdomains :: ${{ steps.read-and-store.outputs.DOMAIN_NAME }} : $(cat $GITHUB_WORKSPACE/${{ env.folder_path }}/active_subdomains.txt |wc -l)"  
      
      # - name: List output directry
      #   run: |
      #     ls -lt output/
      #   shell: bash  
      # - name: Log naabu version
      #   run: |
      #     naabu --version
      #   shell: bash

      - name: naabu scan
        run: |
          naabu -l input/domains.txt -rate 10000 | tee ${{ env.folder_path }}/active_ports.txt
        shell: bash

      # - name: Notify Active Ports Count  
      #   run: |
      #     bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh "Active Ports :: ${{ steps.read-and-store.outputs.DOMAIN_NAME }}  : $(cat $GITHUB_WORKSPACE/${{ env.folder_path }}/active_ports.txt |wc -l)"      

      - name: Running httpx for HTTP webservers probbing
        run: |
          httpx -l ${{ env.folder_path }}/active_ports.txt | tee ${{ env.folder_path }}/active_urls.txt
        shell: bash

      # - name: Notify Active urls Count  
      #   run: |
      #     bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh "Active Urls :: ${{ steps.read-and-store.outputs.DOMAIN_NAME }} : $(cat $GITHUB_WORKSPACE/${{ env.folder_path }}/active_urls.txt |wc -l)"      
    
      - name: Downloading Nuclei Templates
        run: |
          nuclei -update-templates
        shell: bash

      - name: List Nuclei Templates
        run: |
          ls -lt /home/runner/nuclei-templates
        shell: bash

      - name: Running Nuclei for vulnerability assessment
        run: | 
          nuclei -t http/ -l ${{ env.folder_path }}/active_urls.txt -bs 100 -c 50 -rl 300 -nc | tee output/nuclei/${{ env.domain_name }}.txt
        shell: bash
      
      - name: Notify CVE details if file is not empty
        run: |
          FILE_PATH="$GITHUB_WORKSPACE/output/nuclei/${{ env.domain_name }}.txt"
          FILE_CONTENT=$(cat "$FILE_PATH" | wc -l)
          echo "File Content Lines: $FILE_CONTENT"
          if [ $FILE_CONTENT -gt 0 ]; then
            echo "File is not empty, sending notification..."
            bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh "github = ${{ env.domain_name }}"
          else
            echo "File is empty, skipping notification..."
          fi

      # - name: Notify CVE details 
      #   run: |
      #     FILE_CONTENT=$(<"$GITHUB_WORKSPACE/output/nuclei/${{ env.domain_name }}.txt")
      #     echo "$FILE_CONTENT" 
      #     bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh "File Contents :: ${{ steps.read-and-store.outputs.DOMAIN_NAME }} ::: $FILE_CONTENT"

      # - name: Notify Status End
      #   run: |
      #     bash $GITHUB_WORKSPACE/scripts/notify/discordNotify.sh end

      # - name: Sorting the output results
      #   run: |
      #     find output -type f -exec sort {} -o {} \;
      #   shell: bash

          # git add output/passive_subdomains.txt
          # git add output/active_subdomains.txt
          # git add output/active_ports.txt
          # git add output/active_urls.txt
      # - name: Create local changes
      #   run: |
      #     git pull
      #     git add output/
      #     git add input/

      # - name: Commit results to Github
      #   run: |
      #     git config --local user.email "vskrishnan27@gmail.com"
      #     git config --global user.name "vskrishnan27"
      #     git commit -m "vskrishnan-run by actions" --allow-empty

      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.P_A_T }}
      #     branch: ${{ github.ref }}

      - name : Trigger next workflow
        run: |
          bash $GITHUB_WORKSPACE/scripts/TriggerWorkFlowDispatch.sh "${{ secrets.P_A_T }}"